#!/bin/bash

# Manual E2E test script for TDLib authorization
# Platforms: Linux (priority), macOS (optional)
#
# –ß—Ç–æ –¥–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç:
# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (Linux/macOS)
# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (TELEGRAM_API_ID, TELEGRAM_API_HASH, TELEGRAM_PHONE)
# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ TDLib
# 4. –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö ~/.tdlib/ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å —Ñ–ª–∞–≥–æ–º --clean)
# 5. –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ (swift build)
# 6. –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (swift run tg-client) - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
#
# –ß—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ:
# - TDLib –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
# - –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—è–µ—Ç—Å—è: waitTdlibParameters ‚Üí waitPhoneNumber ‚Üí waitCode ‚Üí authorizationStateReady
# - getMe –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# - –°–æ–∑–¥–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ ~/.tdlib/
# - –ù–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: SMS –∫–æ–¥ –∏ 2FA –ø–∞—Ä–æ–ª—å –≤–≤–æ–¥—è—Ç—Å—è –≤—Ä—É—á–Ω—É—é –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ
#
# Usage:
#   export TELEGRAM_API_ID=your_api_id
#   export TELEGRAM_API_HASH=your_api_hash
#   export TELEGRAM_PHONE=+1234567890
#   ./scripts/manual_e2e_auth.sh [--clean] [--skip-build] [--verbose]
#
# Options:
#   --clean        Remove old TDLib state before running
#   --skip-build   Skip swift build, use existing binary
#   --verbose      Enable verbose output (swift build -v)

set -e

# Parse options
CLEAN_STATE=false
SKIP_BUILD=false
VERBOSE=false

for arg in "$@"; do
    case $arg in
        --clean)
            CLEAN_STATE=true
            ;;
        --skip-build)
            SKIP_BUILD=true
            ;;
        --verbose)
            VERBOSE=true
            ;;
    esac
done

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Load .env file if it exists
if [[ -f .env ]]; then
    echo -e "${YELLOW}–ó–∞–≥—Ä—É–∑–∫–∞ credentials –∏–∑ .env...${NC}"
    source .env
    echo -e "${GREEN}‚úì .env –∑–∞–≥—Ä—É–∂–µ–Ω${NC}"
fi

# Detect platform
PLATFORM=$(uname -s)
echo -e "${YELLOW}–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: $PLATFORM${NC}"

if [[ "$PLATFORM" != "Linux" && "$PLATFORM" != "Darwin" ]]; then
    echo -e "${RED}‚ùå Unsupported platform: $PLATFORM${NC}"
    echo "This script supports Linux (priority) and macOS (optional)"
    exit 1
fi

# Check required environment variables
echo -e "\n${YELLOW}–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...${NC}"
REQUIRED_VARS=("TELEGRAM_API_ID" "TELEGRAM_API_HASH" "TELEGRAM_PHONE")
for var in "${REQUIRED_VARS[@]}"; do
    if [[ -z "${!var}" ]]; then
        echo -e "${RED}‚ùå Missing required environment variable: $var${NC}"
        echo "Please set all required variables:"
        echo "  export TELEGRAM_API_ID=your_api_id"
        echo "  export TELEGRAM_API_HASH=your_api_hash"
        echo "  export TELEGRAM_PHONE=+1234567890"
        exit 1
    fi
    echo -e "${GREEN}‚úì $var is set${NC}"
done

# Check TDLib installation
echo -e "\n${YELLOW}–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ TDLib...${NC}"
if [[ "$PLATFORM" == "Linux" ]]; then
    if ! ldconfig -p | grep -q libtdjson; then
        echo -e "${RED}‚ùå TDLib not found${NC}"
        echo "Install TDLib on Linux:"
        echo "  sudo apt-get install -y libtdjson-dev"
        exit 1
    fi
elif [[ "$PLATFORM" == "Darwin" ]]; then
    if ! brew list tdlib &>/dev/null; then
        echo -e "${RED}‚ùå TDLib not found${NC}"
        echo "Install TDLib on macOS:"
        echo "  brew install tdlib"
        exit 1
    fi
fi
echo -e "${GREEN}‚úì TDLib is installed${NC}"

# Clean old state if requested
TDLIB_DIR="$HOME/.tdlib"
if [[ "$CLEAN_STATE" == true ]]; then
    echo -e "\n${YELLOW}–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è TDLib...${NC}"
    if [[ -d "$TDLIB_DIR" ]]; then
        rm -rf "$TDLIB_DIR"
        echo -e "${GREEN}‚úì Removed $TDLIB_DIR${NC}"
    else
        echo -e "${YELLOW}  (–Ω–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è)${NC}"
    fi
fi

# Build the project
if [[ "$SKIP_BUILD" == true ]]; then
    echo -e "\n${YELLOW}‚è≠  –ü—Ä–æ–ø—É—Å–∫ —Å–±–æ—Ä–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–∏–Ω–∞—Ä–Ω–∏–∫)${NC}"
    if [[ ! -f .build/debug/tg-client ]]; then
        echo -e "${RED}‚ùå –ë–∏–Ω–∞—Ä–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: .build/debug/tg-client${NC}"
        echo -e "${RED}   –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ --skip-build –¥–ª—è —Å–±–æ—Ä–∫–∏${NC}"
        exit 1
    fi
else
    echo -e "\n${YELLOW}–°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...${NC}"
    echo -e "${YELLOW}‚è±  –ü–µ—Ä–≤–∞—è —Å–±–æ—Ä–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 15-30 —Å–µ–∫—É–Ω–¥ (–ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –±—ã—Å—Ç—Ä–µ–µ)${NC}"
    if [[ "$VERBOSE" == true ]]; then
        echo -e "${YELLOW}üìã –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –≤–∫–ª—é—á–µ–Ω${NC}"
        swift build -v
    else
        swift build
    fi
    echo -e "${GREEN}‚úì –°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–∞${NC}"
fi

# Run authorization
echo -e "\n${YELLOW}–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...${NC}"
echo -e "${YELLOW}–°–ª–µ–¥—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º –¥–ª—è –≤–≤–æ–¥–∞ SMS-–∫–æ–¥–∞ –∏ 2FA –ø–∞—Ä–æ–ª—è (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)${NC}"
echo -e "${YELLOW}================================================${NC}\n"

LOG_FILE="/tmp/tg-client-e2e-$(date +%s).log"
swift run tg-client 2>&1 | tee "$LOG_FILE"

# Verify results
echo -e "\n${YELLOW}–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...${NC}"

# Check 1: authorizationStateReady reached
if grep -q "authorizationStateReady" "$LOG_FILE"; then
    echo -e "${GREEN}‚úì Authorization state reached: Ready${NC}"
else
    echo -e "${RED}‚ùå Failed to reach authorizationStateReady${NC}"
    echo -e "${RED}   Check logs: $LOG_FILE${NC}"
    exit 1
fi

# Check 2: getMe returned user data
if grep -q "getMe" "$LOG_FILE"; then
    echo -e "${GREEN}‚úì getMe request executed${NC}"
else
    echo -e "${YELLOW}‚ö† getMe not found in logs (check manually)${NC}"
fi

# Check 3: TDLib state files created
if [[ -d "$TDLIB_DIR" ]]; then
    echo -e "${GREEN}‚úì TDLib state directory created: $TDLIB_DIR${NC}"
else
    echo -e "${RED}‚ùå TDLib state directory not found${NC}"
    exit 1
fi

# Check 4: No critical errors
if grep -qi "error\|failed\|exception" "$LOG_FILE" | grep -v "authorizationStateWaitCode"; then
    echo -e "${YELLOW}‚ö† Errors found in logs (review manually)${NC}"
    echo -e "${YELLOW}   Log file: $LOG_FILE${NC}"
else
    echo -e "${GREEN}‚úì No critical errors detected${NC}"
fi

# Summary
echo -e "\n${GREEN}================================================${NC}"
echo -e "${GREEN}‚úÖ Manual E2E test completed successfully${NC}"
echo -e "${GREEN}================================================${NC}"
echo -e "\nLog file saved: $LOG_FILE"
echo -e "TDLib state: $TDLIB_DIR"
echo -e "\nPlatform: $PLATFORM"
